#!/usr/bin/env python3
"""
Collect all references matching into one tree and commit that onto a target branch.
All reference targets are also added as parents to make sure they are transferred
when the target ref is fetched.
"""

import os
import pygit2
import sys
import fnmatch

pattern = sys.argv[1]
target = sys.argv[2]

current_working_directory = os.getcwd()
repository_path = pygit2.discover_repository(current_working_directory)
repo = pygit2.Repository(repository_path)

ptree = None

try:
    parent, ref = repo.resolve_refish(refish=target)
    parents = [parent.id]
    ptree = repo.get(parent.id).tree
    ref = ref.name
except:
    parents = []
    ref = target

index = pygit2.Index()

for path in repo.raw_listall_references():
    path = path.decode("utf8")
    if fnmatch.fnmatch(path, pattern):

        r = repo.lookup_reference(path).raw_target

        if not (ptree and path in ptree and ptree[path].id == r):
            parents.append(r)

        entry = pygit2.IndexEntry(path, r, pygit2.GIT_FILEMODE_COMMIT)

        index.add(entry)

tree = index.write_tree(repo)

if ptree and tree == ptree.id:
    print("no new refs")
    sys.exit(0)

print(f"{len(parents)} updated refs")

c = repo.create_commit(
    ref,
    repo.default_signature,
    repo.default_signature,
    pattern,
    tree,
    parents)

print(c)
